generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Masculino
  Feminino
  Outro
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  gender    Gender?
  imageSrc  String?     
  createdAt DateTime @default(now())
  birthDate String?

  hash String
  salt String

  cart       Cart?
  wishlist   Wishlist? 
  orders     Order[]
  reviews    Review[]
}

model Product {
  id             String    @id @default(uuid())
  name           String
  description    String
  basePrice      Decimal   @db.Decimal(10,2)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())

  categoryId     String
  category       Category  @relation(fields: [categoryId], references: [id])

  offerId        String?
  offer          Offer?    @relation(fields: [offerId], references: [id]) 
  
  orderProducts  OrderProduct[]
  images         ProductImage[]
  reviews        Review[]
  variants       Variant[]  
  wishlistItems  WishlistItem[] 
  cartItems      CartItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  imageUrl  String
  isMain    Boolean  @default(false)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
} 

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}   

model Cart {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
}

model Wishlist {
  userId      String    @id 
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdDate DateTime  @default(now())
  items       WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  addedDate  DateTime @default(now())
  
  wishlist   Wishlist @relation(fields: [wishlistId], references: [userId], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  
  @@unique([wishlistId, productId]) 
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  status        String        @default("pending") // pending, shipped, delivered, cancelled
  dateOrdered   DateTime      @default(now())
  totalCost     Decimal       @db.Decimal(10, 2)
  address       String
  
  user          User          @relation(fields: [userId], references: [id])
  orderProducts OrderProduct[] 
}

model OrderProduct {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int      @default(1)
  unitPrice  Decimal  @db.Decimal(10, 2)
  
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  
  @@unique([orderId, productId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Variant {
  id        String   @id @default(uuid())
  price     Decimal  @db.Decimal(10,2)
  stock     Int
  isActive  Boolean

  productId String    
  product   Product   @relation(fields: [productId], references: [id])

  colorId   String      
  color     Color     @relation(fields: [colorId], references: [id])

  sizeId    String    
  size      Size      @relation(fields: [sizeId], references: [id])
}

model Color {
  id       String   @id @default(uuid())
  name     String
  hexCode  String
  variants Variant[]
}

model Size {
  id       String   @id @default(uuid())
  label    String    
  variants Variant[]
}

model Offer {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  name          String    
  description   String?   
  discountType  DiscountType
  discountValue Decimal   @db.Decimal(10,2)
  startsAt      DateTime  
  endsAt        DateTime  
  isActive      Boolean   @default(true)

  products      Product[]
}
