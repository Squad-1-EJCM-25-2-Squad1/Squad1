// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String
  gender    String   //deve ser um de "Masculino, feminino ou Outro" fazer o enum depois
  imageSrc  String     
  createdAt DateTime @default(now())
  birthDate String

  //parte do password
  hash String
  salt String

  //Fazer ser obrigatorio a criação de tanto um cart quanto uma wishlist, mesmo que vazios
  //na criação do usuário, pode ser alterado depois para uma aproximação mais simples
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String   @unique
  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId String   @unique

  //relaçoes com outras models
  orders Order[]
  reviews Review[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  basePrice   Decimal
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  
  order_products      OrderProduct[] // Relação com OrderProduct

  images      ProductImage[]
}

model ProductImage {
  id            String   @id @default(uuid())
  imageUrl      String
  isMain        Boolean  @default(false)

  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}   


model Cart{
  id       String   @id @default(uuid())
  owner    User?

}

model Wishlist {
  user_id             Int             @id
  user                User            @relation("UserWishlist", fields: [user_id], references: [id])
  created_date        DateTime        @default(now())
  items               Wishlist_item[]
}

model Wishlist_item {
  wishlist_item_id    Int             @id @default(autoincrement())
  wishlist_id         Int
  product_id          Int
  added_date          DateTime        @default(now())
  
  wishlist            Wishlist        @relation(fields: [wishlist_id], references: [user_id])
  product             Product         @relation(fields: [product_id], references: [id])
  
  @@unique([wishlist_id, product_id])
}

model Order {
  id                  Int             @id @default(autoincrement())
  user_id             Int
  status              String          @default("pending") // pending, shipped, delivered, cancelled
  date_ordered        DateTime        @default(now())
  total_cost          Decimal         @db.Decimal(10, 2)
  address             String
  
  user                User            @relation(fields: [user_id], references: [id])
  order_products      OrderProduct[] 
}

model OrderProduct {
  id                  Int             @id @default(autoincrement())
  order_id            Int
  product_id          Int
  quantity            Int             @default(1)
  unit_price          Decimal         @db.Decimal(10, 2)
  
  order               Order           @relation(fields: [order_id], references: [id])
  product             Product         @relation(fields: [product_id], references: [id])
  
  @@unique([order_id, product_id])

}

model Review{
  id        String   @id @default(uuid())
  ownerId String
  owner    User   @relation(fields: [ownerId], references: [id])
}

model Variant {
  id        String    @id @default(uuid())
  price     Float     
  stock     Int       
  isActive  Boolean   

  //productId String    
  //product   Product   @relation(fields: [productId], references: [id])

  colorId   String      
  color     Color     @relation(fields: [colorId], references: [id])

  sizeId    String    
  size      Size      @relation(fields: [sizeId], references: [id])
}

model Color {
  id       String @id @default(uuid())
  name     String
  hexCode  String
  variants Variant[]
}

model Size {
  id       String    @id @default(uuid())
  label    String    
  variants Variant[]
}

model Offer {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  name          String    
  description   String?   
  discountType  String    
  discountValue Float     
  startsAt      DateTime  
  endsAt        DateTime  
  isActive      Boolean   

  //productId     String    
  //product       Product   @relation(fields: [productId], references: [id]) 

  //cartItems     CartItem[]
}
